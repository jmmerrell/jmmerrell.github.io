mean(beta.samp)
n.samp <- 100000000
g.samp <- runif(n.samp,mu-s,mu+s)
beta.samp <- g.samp[runif(n.samp) <= f(g.samp,1)/(my.c*g(g.samp,mu,s))]
hist(beta.samp,freq=F)
curve(f(x,powr),5,15,add=T,xlim = c(0,2))
mean(beta.samp)
my.c <- (mu+s)^powr/s
f <- function(x,powr) (1/(2*5)*(1+cos((x-10)/5*pi))*(x^powr))
g <- function(x,mu,s) dunif(x,mu-s,mu+s)
mu <- 10
s <- 5
powr <- 1
my.c <- (mu+s)^powr/s
n.samp <- 100000000
g.samp <- runif(n.samp,mu-s,mu+s)
beta.samp <- g.samp[runif(n.samp) <= f(g.samp,1)/(my.c*g(g.samp,mu,s))]
hist(beta.samp,freq=F)
curve(f(x,powr),5,15,add=T,xlim = c(0,2))
mean(beta.samp)
f <- function(x,powr) (1/(2*5)*(1+cos((x-10)/5*pi))*(x^powr))
g <- function(x,mu,s) dunif(x,mu-s,mu+s)
mu <- 10
s <- 5
powr <- 2
my.c <- (mu+s)^powr/s
n.samp <- 100000000
g.samp <- runif(n.samp,mu-s,mu+s)
mu <- 10
s <- 5
powr <- 2
my.c <- (mu+s)^powr/s
n.samp <- 10000000
g.samp <- runif(n.samp,mu-s,mu+s)
beta.samp <- g.samp[runif(n.samp) <= f(g.samp,powr)/(my.c*g(g.samp,mu,s))]
hist(beta.samp,freq=F)
curve(f(x,powr),5,15,add=T,xlim = c(0,2))
mean(beta.samp)
mu <- 10
s <- 5
powr <- 2
my.c <- 1/(2*s)
n.samp <- 10000000
g.samp <- runif(n.samp,mu-s,mu+s)
beta.samp <- g.samp[runif(n.samp) <= f(g.samp,powr)/(my.c*g(g.samp,mu,s))]
hist(beta.samp,freq=F)
curve(f(x,powr),5,15,add=T,xlim = c(0,2))
mean(beta.samp)
library(Rcpp)
sourceCpp("ForFinal.cpp")
setwd("~/Documents/aSchool/624 - Statistical Computing/Final Project")
library(Rcpp)
sourceCpp("ForFinal.cpp")
sourceCpp("ForFinal.cpp")
setwd("~/aDocuments/aaSchool/624_statistical_computing/Final Project")
data2 <- readRDS("movie_data.rds")
library(randomForest)
data3 <- data2[,c(13,4:7,9,40,41,82:91)]
data3[,2:5] <- lapply(data3[,2:5], factor)
data3 <- data2[,c(13,4:7,9,40,41,82:91)]
data3[,2:5] <- lapply(data3[,2:5], factor)
rf <- randomForest(infdomgross ~ ., data=data3)
oob.err=double(17)
test.err=double(17)
for(mtry in 1:17)
{
rf<-randomForest(infdomgross ~ ., data=data3, subset=train, mtry=mtry, ntree=100)
oob.err[mtry] = rf$mse[100] #Error of all Trees fitted
pred<-predict(rf,data3[-train,]) #Predictions on Test Set for each Tree
test.err[mtry]= with(data3[-train,], mean( (infdomgross - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
train <- sample(1:nrow(data3),nrow(data3)*2/3)
for(mtry in 1:17)
{
rf<-randomForest(infdomgross ~ ., data=data3, subset=train, mtry=mtry, ntree=100)
oob.err[mtry] = rf$mse[100] #Error of all Trees fitted
pred<-predict(rf,data3[-train,]) #Predictions on Test Set for each Tree
test.err[mtry]= with(data3[-train,], mean( (infdomgross - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
pdf("optim_trees.pdf")
plot(rf)
dev.off()
pdf("mtry.pdf")
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
dev.off()
modl <-randomForest(infdomgross ~ ., data=data2,mtry=8, ntree=100)
modl <-randomForest(infdomgross ~ ., data=data3,mtry=8, ntree=100)
data.off <- cbind(data3$infdomgross/1000000,modl$fitted.values/1000000)
data.off1 <- data.off[data.off[,1]>400,]
data.off2 <- data.off[data.off[,1]>80&data.off[,1]<120,]
outs <- matrix(c(mean(data.off1[,1]),mean(data.off1[,2]),mean(data.off2[,1]),mean(data.off2[,2])),2,2,byrow=T)
row.names(outs)<- c("Movies Above $400 million","Movies Between $80 and $120 million")
data.off
data3$infdomgross/1000000
modl$fitted.values/1000000
data.off <- cbind(data3$infdomgross/1000000,modl$predicted/1000000)
data.off1 <- data.off[data.off[,1]>400,]
data.off2 <- data.off[data.off[,1]>80&data.off[,1]<120,]
outs <- matrix(c(mean(data.off1[,1]),mean(data.off1[,2]),mean(data.off2[,1]),mean(data.off2[,2])),2,2,byrow=T)
row.names(outs)<- c("Movies Above $400 million","Movies Between $80 and $120 million")
colnames(outs)<- c("Mean of Observed Values","Mean of Predicted Values")
xtable(outs)
library(xtable)
xtable(outs)
nCores <- 4
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:1000,.combine = "rbind") %do% {
model.stats(data3)
}
library(doParallel)
library(foreach)
nCores <- 4
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:1000,.combine = "rbind") %do% {
model.stats(data3)
}
model.stats <- function(x){
train <- sample(1:nrow(x),nrow(x)*2/3)
rf <- randomForest(infdomgross ~ ., data=x, subset=train, mtry=8, ntree=100)
out.mat[1,1] <- mean(rf$rsq)
out.mat[1,2] <- mean(rf$predicted/1000000-x$infdomgross[train]/1000000)
out.mat[1,3] <- sqrt(mean(((rf$predicted/1000000-x$infdomgross[train]/1000000)^2)))
return(out.mat)
}
nCores <- 4
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:1000,.combine = "rbind") %do% {
model.stats(data3)
}
out.mat <- matrix(0,1,3)
colnames(out.mat)<-c("r2","bias","rmse")
model.stats <- function(x){
train <- sample(1:nrow(x),nrow(x)*2/3)
rf <- randomForest(infdomgross ~ ., data=x, subset=train, mtry=8, ntree=100)
out.mat[1,1] <- mean(rf$rsq)
out.mat[1,2] <- mean(rf$predicted/1000000-x$infdomgross[train]/1000000)
out.mat[1,3] <- sqrt(mean(((rf$predicted/1000000-x$infdomgross[train]/1000000)^2)))
return(out.mat)
}
nCores <- 4
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:1000,.combine = "rbind") %do% {
model.stats(data3)
}
Sys.time()
nCores <- 4
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:10,.combine = "rbind") %do% {
model.stats(data3)
}
Sys.time()
View(mat.rows)
Sys.time()
nCores <- 1
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:10,.combine = "rbind") %do% {
model.stats(data3)
}
Sys.time()
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=50) +
geom_density()+
xlab("MSE")+
ggtitle("MSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
library(ggplot2)
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=50) +
geom_density()+
xlab("MSE")+
ggtitle("MSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2, ncol=2) # Write the grid.arrange in the file
dev.off()
library(gridExtra)
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=50) +
geom_density()+
xlab("MSE")+
ggtitle("MSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2, ncol=2) # Write the grid.arrange in the file
dev.off()
setwd("C:/Users/merre/Desktop/jmmerrell.github.io/movie_random_forest")
setwd("C:/Users/merre/Desktop/jmmerrell.github.io/movie_random_forest")
library(ggplot2)
library(gridExtra)
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=50) +
geom_density()+
xlab("MSE")+
ggtitle("MSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2, ncol=2) # Write the grid.arrange in the file
dev.off()
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("R-Squared")+
ggtitle("R-Squared Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot3 <- ggplot()+
geom_histogram(aes(x=mat.rows[,3], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=50) +
geom_density()+
xlab("MSE")+
ggtitle("MSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2,plot3, ncol=3) # Write the grid.arrange in the file
dev.off()
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("R-Squared")+
ggtitle("R-Squared Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot3 <- ggplot()+
geom_histogram(aes(x=mat.rows[,3], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=50) +
geom_density()+
xlab("MSE")+
ggtitle("MSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2,plot3, ncol=3) # Write the grid.arrange in the file
dev.off()
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2,plot3, ncol=2, nrow=2) # Write the grid.arrange in the file
dev.off()
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2,plot3, ncol=2, nrow=2) # Write the grid.arrange in the file
dev.off()
library(randomForest)
data3 <- data2[,c(13,4:7,9,40,41,82:91)]
data3[,2:5] <- lapply(data3[,2:5], factor)
train <- sample(1:nrow(data3),nrow(data3)*2/3)
rf <- randomForest(infdomgross ~ ., data=data3, subset=train)
##This shows optimal number of trees
pdf("optim_trees.pdf")
plot(rf)
dev.off()
##Optimal number of variables to select at each node
oob.err=double(17)
test.err=double(17)
#mtry is no of Variables randomly chosen at each split
for(mtry in 1:17)
{
rf<-randomForest(infdomgross ~ ., data=data3, subset=train, mtry=mtry, ntree=100)
oob.err[mtry] = rf$mse[100] #Error of all Trees fitted
pred<-predict(rf,data3[-train,]) #Predictions on Test Set for each Tree
test.err[mtry]= with(data3[-train,], mean( (infdomgross - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
pdf("mtry.pdf")
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
dev.off()
##Function to calculate R2, MSE, Bias, prediction interval coverage, and AIC
library(HH)
out.mat <- matrix(0,1,3)
colnames(out.mat)<-c("r2","bias","rmse")
model.stats <- function(x){
train <- sample(1:nrow(x),nrow(x)*2/3)
rf <- randomForest(infdomgross ~ ., data=x, subset=train, mtry=8, ntree=100)
out.mat[1,1] <- mean(rf$rsq)
out.mat[1,2] <- mean(rf$predicted/1000000-x$infdomgross[train]/1000000)
out.mat[1,3] <- sqrt(mean(((rf$predicted/1000000-x$infdomgross[train]/1000000)^2)))
return(out.mat)
}
###Make data to show budget and infdomgross changes
data2000 <- data[data$date>'2000-01-01'&data$infbudget>quantile(data$infbudget[data$date>'2000-01-01'],.01)&data$infbudget<quantile(data$infbudget[data$date>'2000-01-01'],.99)&data$infbudget>quantile(data$infdomgross[data$date>'2000-01-01'],.01)&data$infdomgross<quantile(data$infdomgross[data$date>'2000-01-01'],.99),]
dataless2000 <- data[data$date<='2000-01-01'&data$infbudget>quantile(data$infbudget[data$date<='2000-01-01'],.01)&data$infbudget<quantile(data$infbudget[data$date<='2000-01-01'],.99)&data$infbudget>quantile(data$infdomgross[data$date<='2000-01-01'],.01)&data$infdomgross<quantile(data$infdomgross[data$date<='2000-01-01'],.99),]
data.merge <- rbind(cbind(dataless2000,group="Before 2000"),cbind(data2000,group="After 2000"))
library(ggplot2)
###plot budget
plot1 <- ggplot(data = data.merge, aes(x=group,y=infbudget/1000000,fill=group)) +
geom_boxplot()+
ylab("Movie Budget")+
xlab("")+
ggtitle("Movie Budgets Before and After 2000")+
theme_grey(base_size=16)+
theme(legend.position="none")
###plot budget
plot2 <- ggplot(data = data.merge, aes(x=group,y=infdomgross/1000000,fill=group)) +
geom_boxplot()+
ylab("Movie Gross")+
xlab("")+
ggtitle("Movie Grosses Before and After 2000")+
theme_grey(base_size=16)+
theme(legend.position="none")
pdf("dataissue.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2, ncol=2) # Write the grid.arrange in the file
dev.off()
######MSE and Bias Simulation Study
library(xtable)
modl <-randomForest(infdomgross ~ ., data=data3,mtry=8, ntree=100)
data.off <- cbind(data3$infdomgross/1000000,modl$predicted/1000000)
data.off1 <- data.off[data.off[,1]>400,]
data.off2 <- data.off[data.off[,1]>80&data.off[,1]<120,]
outs <- matrix(c(mean(data.off1[,1]),mean(data.off1[,2]),mean(data.off2[,1]),mean(data.off2[,2])),2,2,byrow=T)
row.names(outs)<- c("Movies Above $400 million","Movies Between $80 and $120 million")
colnames(outs)<- c("Mean of Observed Values","Mean of Predicted Values")
xtable(outs)
Sys.time()
nCores <- 1
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:10,.combine = "rbind") %do% {
model.stats(data3)
}
Sys.time()
library(ggplot2)
library(gridExtra)
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("R-Squared")+
ggtitle("R-Squared Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot3 <- ggplot()+
geom_histogram(aes(x=mat.rows[,3], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=50) +
geom_density()+
xlab("MSE")+
ggtitle("MSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2,plot3, ncol=2, nrow=2) # Write the grid.arrange in the file
dev.off()
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2,plot3, ncol=2, nrow=2) # Write the grid.arrange in the file
dev.off()
data2000 <- data2[data2$date>'2000-01-01'&data2$infbudget>quantile(data2$infbudget[data2$date>'2000-01-01'],.01)&data2$infbudget<quantile(data2$infbudget[data2$date>'2000-01-01'],.99)&data2$infbudget>quantile(data2$infdomgross[data2$date>'2000-01-01'],.01)&data2$infdomgross<quantile(data2$infdomgross[data2$date>'2000-01-01'],.99),]
dataless2000 <- data2[data2$date<='2000-01-01'&data2$infbudget>quantile(data2$infbudget[data2$date<='2000-01-01'],.01)&data2$infbudget<quantile(data2$infbudget[data2$date<='2000-01-01'],.99)&data2$infbudget>quantile(data2$infdomgross[data2$date<='2000-01-01'],.01)&data2$infdomgross<quantile(data2$infdomgross[data2$date<='2000-01-01'],.99),]
data.merge <- rbind(cbind(dataless2000,group="Before 2000"),cbind(data2000,group="After 2000"))
data2$date
data2000 <- data2[data2$date>'2000-01-01'&data2$infbudget>quantile(data2$infbudget[data2$date>'2000-01-01'],.01)&data2$infbudget<quantile(data2$infbudget[data2$date>'2000-01-01'],.99)&data2$infbudget>quantile(data2$infdomgross[data2$date>'2000-01-01'],.01)&data2$infdomgross<quantile(data2$infdomgross[data2$date>'2000-01-01'],.99),]
data2000 <- data2[data2$date>'2000-01-01'&data2$infbudget>quantile(data2$infbudget[data2$date>'2000-01-01'],.01)&data2$infbudget<quantile(data2$infbudget[data2$date>'2000-01-01'],.99)&data2$infbudget>quantile(data2$infdomgross[data2$date>'2000-01-01'],.01)&data2$infdomgross<quantile(data2$infdomgross[data2$date>'2000-01-01'],.99),]
dataless2000 <- data2[data2$date<='2000-01-01'&data2$infbudget>quantile(data2$infbudget[data2$date<='2000-01-01'],.01)&data2$infbudget<quantile(data2$infbudget[data2$date<='2000-01-01'],.99)&data2$infbudget>quantile(data2$infdomgross[data2$date<='2000-01-01'],.01)&data2$infdomgross<quantile(data2$infdomgross[data2$date<='2000-01-01'],.99),]
data.merge <- rbind(cbind(dataless2000,group="Before 2000"),cbind(data2000,group="After 2000"))
cbind(dataless2000,group="Before 2000")
dataless2000
data3 <- data2[,c(13,4:7,9,40,41,82:91)]
data3[,2:5] <- lapply(data3[,2:5], factor)
train <- sample(1:nrow(data3),nrow(data3)*2/3)
rf <- randomForest(infdomgross ~ ., data=data3, subset=train)
##This shows optimal number of trees
pdf("optim_trees.pdf")
plot(rf)
dev.off()
##Optimal number of variables to select at each node
oob.err=double(17)
test.err=double(17)
#mtry is no of Variables randomly chosen at each split
for(mtry in 1:17)
{
rf<-randomForest(infdomgross ~ ., data=data3, subset=train, mtry=mtry, ntree=100)
oob.err[mtry] = rf$mse[100] #Error of all Trees fitted
pred<-predict(rf,data3[-train,]) #Predictions on Test Set for each Tree
test.err[mtry]= with(data3[-train,], mean( (infdomgross - pred)^2)) #Mean Squared Test Error
cat(mtry," ") #printing the output to the console
}
pdf("mtry.pdf")
matplot(1:mtry , cbind(oob.err,test.err), pch=19 , col=c("red","blue"),type="b",ylab="Mean Squared Error",xlab="Number of Predictors Considered at each Split")
legend("topright",legend=c("Out of Bag Error","Test Error"),pch=19, col=c("red","blue"))
dev.off()
Sys.time()
nCores <- 1
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:1000,.combine = "rbind") %do% {
model.stats(data3)
}
Sys.time()
nCores <- 1
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:2,.combine = "rbind") %do% {
model.stats(data3)
}
Sys.time()
View(mat.rows)
Sys.time()
nCores <- 1
registerDoParallel(nCores)
start <- Sys.time()
mat.rows <- foreach(ii=1:1000,.combine = "rbind") %do% {
model.stats(data3)
}
Sys.time()
library(ggplot2)
library(gridExtra)
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("R-Squared")+
ggtitle("R-Squared Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot3 <- ggplot()+
geom_histogram(aes(x=mat.rows[,3], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=50) +
geom_density()+
xlab("MSE")+
ggtitle("MSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2,plot3, ncol=2, nrow=2) # Write the grid.arrange in the file
dev.off()
plot1 <- ggplot()+
geom_histogram(aes(x=mat.rows[,1], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("R-Squared")+
ggtitle("R-Squared Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot2 <- ggplot()+
geom_histogram(aes(x=mat.rows[,2], y=..density..,alpha=.2),  fill="red",bins=50,binwidth=.01) +
geom_density()+
xlab("Bias")+
ggtitle("Bias Simulations")+
theme_grey(base_size = 18) +
theme(legend.position="none")
plot3 <- ggplot()+
geom_histogram(aes(x=mat.rows[,3], y=..density..,alpha=.2),  fill="green",bins=50,binwidth=.1) +
geom_density()+
xlab("RMSE")+
ggtitle("RMSE Simulations")+
theme_grey(base_size=18)+
theme(legend.position="none")
plot3
pdf("biasmse.pdf", width = 12, height = 8, onefile=T, paper='A4r') # Open a new pdf file
grid.arrange(plot1, plot2,plot3, ncol=2, nrow=2) # Write the grid.arrange in the file
dev.off()
